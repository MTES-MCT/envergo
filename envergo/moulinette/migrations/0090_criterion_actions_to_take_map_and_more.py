# Generated by Django 4.2.23 on 2025-10-03 07:40

from django.db import migrations, models
from tqdm import tqdm

def classpath(klass):
    return "{}.{}".format(klass.__module__, klass.__name__)

def add_actions_to_take_map(apps, schema_editor):
    Criterion = apps.get_model("moulinette", "Criterion")
    criteria_mapping = {
        "envergo.moulinette.regulations.loisurleau.ZoneHumide": {"action_requise": ["etude_zh_lse"]},
        "envergo.moulinette.regulations.loisurleau.ZoneInondable Zone inondable": {"action_requise": ["etude_zi_lse"]},
        "envergo.moulinette.regulations.loisurleau.EcoulementSansBV": {"action_requise": ["etude_2150"]},
        "envergo.moulinette.regulations.loisurleau.EcoulementAvecBV": {"action_requise": ["etude_2150"]},
        "envergo.moulinette.regulations.natura2000.ZoneHumide": {"action_requise": ["etude_zh_n2000"]},
        "envergo.moulinette.regulations.natura2000.ZoneInondable": {"action_requise": ["etude_zi_n2000"]},
    }

    criteria_qs = Criterion.objects.filter(evaluator__in=criteria_mapping.keys())

    total = criteria_qs.count()
    batch_size = 1000
    i = 0
    with tqdm(total=total) as pbar:
        while i < total:
            models = criteria_qs[i: i + batch_size].iterator()  # noqa
            to_update = []
            for model in models:
                model.actions_to_take_map = criteria_mapping[classpath(model.evaluator)]
                to_update.append(model)

            Criterion.objects.bulk_update(to_update, ["actions_to_take_map"])
            i += batch_size
            pbar.update(batch_size)

    Regulation = apps.get_model("moulinette", "Regulation")
    regulations_mapping = {
        "loi_sur_leau": {
            "soumis_ou_pac": ["depot_pac_lse", "mention_arrete_lse", "pc_ein"],
            "soumis":["depot_dossier_lse", "mention_arrete_lse", "pc_ein"],
            "action_requise": ["mention_arrete_lse"],
        },
        "eval_env": {
            "systematique": ["depot_etude_impact"],
            "cas_par_cas": ["depot_cas_par_cas", "pc_cas_par_cas"],
        },
        "natura2000": {"soumis": ["depot_ein", "pc_ein"]},
    }
    regulations_qs = Regulation.objects.filter(regulation__in=regulations_mapping.keys())
    total = regulations_qs.count()
    batch_size = 1000
    i = 0
    with tqdm(total=total) as pbar:
        while i < total:
            models = regulations_qs[i: i + batch_size].iterator()  # noqa
            to_update = []
            for model in models:
                model.actions_to_take_map = regulations_mapping[model.regulation]
                to_update.append(model)

            Regulation.objects.bulk_update(to_update, ["actions_to_take_map"])
            i += batch_size
            pbar.update(batch_size)

class Migration(migrations.Migration):

    dependencies = [
        ("moulinette", "0089_change_casse_envergo_moulinettetemplate_objects"),
    ]

    operations = [
        migrations.AddField(
            model_name="criterion",
            name="actions_to_take_map",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Au format: {'resultat1': ['action1', 'action2'], 'resultat2': ['action3']}",
                verbose_name="Correspondance résultat/actions à mener",
            ),
        ),
        migrations.AddField(
            model_name="regulation",
            name="actions_to_take_map",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Au format: {'resultat1': ['action1', 'action2'], 'resultat2': ['action3']}",
                verbose_name="Correspondance résultat/actions à mener",
            ),
        ),
        migrations.RunPython(add_actions_to_take_map, migrations.RunPython.noop),
    ]
