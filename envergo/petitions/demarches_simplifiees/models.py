# initially generated by datamodel-codegen:
#   filename:  schema.graphql
#   timestamp: 2025-06-26T04:40:21+00:00

# Generation command:
# docker run --rm -v $PWD:/app python:3.11-slim bash -c "\
#   pip install 'datamodel-code-generator[graphql]' && \
#   datamodel-codegen --input /app/schema.graphql \
#                     --input-file-type graphql \
#                     --output /app/models.py \
#                     --use-standard-collections
#                     --base-class dataclasses.dataclass
#                     --target-python-version 3.12
#                     --output-model-type dataclasses.dataclass "

from __future__ import annotations

import copy
from dataclasses import dataclass, field
from enum import Enum
from typing import Literal, Optional, TypeAlias

from dacite import Config, from_dict


def str_to_int(val):
    return int(val) if isinstance(val, str) and val.isdigit() else val


BigInt: TypeAlias = str
"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""


Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


Coordinates: TypeAlias = str
"""
GeoJSON coordinates
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values
as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache.
The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected
as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


ISO8601Date: TypeAlias = str
"""
An ISO 8601-encoded date
"""


ISO8601DateTime: TypeAlias = str
"""
An ISO 8601-encoded datetime
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values
between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences.
The String type is most often used by GraphQL to represent free-form human-readable text.
"""


URL: TypeAlias = str
"""
A valid URL, transported as a string
"""


class AddressType(Enum):
    housenumber = "housenumber"
    locality = "locality"
    municipality = "municipality"
    street = "street"


class Civilite(Enum):
    M = "M"
    Mme = "Mme"


class ConnectionUsager(Enum):
    deleted = "deleted"
    france_connect = "france_connect"
    password = "password"


class CorrectionReason(Enum):
    incomplete = "incomplete"
    incorrect = "incorrect"
    outdated = "outdated"


class DemarcheState(Enum):
    brouillon = "brouillon"
    close = "close"
    depubliee = "depubliee"
    publiee = "publiee"


class DossierDeclarativeState(Enum):
    accepte = "accepte"
    en_instruction = "en_instruction"


class DossierState(Enum):
    accepte = "accepte"
    en_construction = "en_construction"
    en_instruction = "en_instruction"
    refuse = "refuse"
    sans_suite = "sans_suite"

    @property
    def display_value(self):
        map = {
            DossierState.accepte: "Accepté",
            DossierState.en_construction: "En construction",
            DossierState.en_instruction: "En instruction",
            DossierState.refuse: "Refusé",
            DossierState.sans_suite: "Sans suite",
        }
        return map.get(self, "Inconnu")


class EntrepriseEtatAdministratif(Enum):
    Actif = "Actif"
    Ferme = "Ferme"


class GeoAreaSource(Enum):
    cadastre = "cadastre"
    selection_utilisateur = "selection_utilisateur"


class LabelColorEnum(Enum):
    """
    Couleurs disponibles pour les labels
    """

    beige_gris_galet = "beige_gris_galet"
    blue_ecume = "blue_ecume"
    brown_cafe_creme = "brown_cafe_creme"
    green_bourgeon = "green_bourgeon"
    green_emeraude = "green_emeraude"
    green_menthe = "green_menthe"
    green_tilleul_verveine = "green_tilleul_verveine"
    pink_macaron = "pink_macaron"
    purple_glycine = "purple_glycine"
    yellow_tournesol = "yellow_tournesol"


class Order(Enum):
    ASC = "ASC"
    DESC = "DESC"


class TitreIdentiteGrantType(Enum):
    france_connect = "france_connect"
    piece_justificative = "piece_justificative"


class TraitementEvent(Enum):
    accepte = "accepte"
    accepte_automatiquement = "accepte_automatiquement"
    classe_sans_suite = "classe_sans_suite"
    depose = "depose"
    depose_correction_instructeur = "depose_correction_instructeur"
    depose_correction_usager = "depose_correction_usager"
    passe_en_instruction = "passe_en_instruction"
    passe_en_instruction_automatiquement = "passe_en_instruction_automatiquement"
    refuse = "refuse"
    refuse_automatiquement = "refuse_automatiquement"
    repasse_en_construction = "repasse_en_construction"
    repasse_en_instruction = "repasse_en_instruction"


class TypeDeChamp(Enum):
    address = "address"
    annuaire_education = "annuaire_education"
    carte = "carte"
    checkbox = "checkbox"
    civilite = "civilite"
    cnaf = "cnaf"
    cojo = "cojo"
    communes = "communes"
    date = "date"
    datetime = "datetime"
    decimal_number = "decimal_number"
    departements = "departements"
    dgfip = "dgfip"
    dossier_link = "dossier_link"
    drop_down_list = "drop_down_list"
    email = "email"
    engagement_juridique = "engagement_juridique"
    epci = "epci"
    explication = "explication"
    formatted = "formatted"
    header_section = "header_section"
    iban = "iban"
    integer_number = "integer_number"
    linked_drop_down_list = "linked_drop_down_list"
    mesri = "mesri"
    multiple_drop_down_list = "multiple_drop_down_list"
    number = "number"
    pays = "pays"
    phone = "phone"
    piece_justificative = "piece_justificative"
    pole_emploi = "pole_emploi"
    referentiel = "referentiel"
    regions = "regions"
    repetition = "repetition"
    rna = "rna"
    rnf = "rnf"
    siret = "siret"
    text = "text"
    textarea = "textarea"
    titre_identite = "titre_identite"
    yes_no = "yes_no"


class TypeOrganisme(Enum):
    administration_centrale = "administration_centrale"
    association = "association"
    autre = "autre"
    collectivite_territoriale = "collectivite_territoriale"
    etablissement_enseignement = "etablissement_enseignement"
    operateur_d_etat = "operateur_d_etat"
    service_deconcentre_de_l_etat = "service_deconcentre_de_l_etat"


PARSER_CONFIG = Config(
    type_hooks={
        int: str_to_int,
        AddressType: AddressType,
        Civilite: Civilite,
        ConnectionUsager: ConnectionUsager,
        CorrectionReason: CorrectionReason,
        DemarcheState: DemarcheState,
        DossierDeclarativeState: DossierDeclarativeState,
        DossierState: DossierState,
        EntrepriseEtatAdministratif: EntrepriseEtatAdministratif,
        GeoAreaSource: GeoAreaSource,
        LabelColorEnum: LabelColorEnum,
        Order: Order,
        TitreIdentiteGrantType: TitreIdentiteGrantType,
        TraitementEvent: TraitementEvent,
        TypeDeChamp: TypeDeChamp,
        TypeOrganisme: TypeOrganisme,
    }
)


@dataclass(kw_only=True)
class ChampBase:
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None


@dataclass(kw_only=True)
class Champ(ChampBase):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["Champ"]] = "Champ"


@dataclass(kw_only=True)
class ChampDescriptor:
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["ChampDescriptor"]] = "ChampDescriptor"


@dataclass(kw_only=True)
class DemandeurBase:
    id: ID = None


@dataclass(kw_only=True)
class Demandeur(DemandeurBase):
    id: ID = None
    typename__: Optional[Literal["Demandeur"]] = "Demandeur"


@dataclass(kw_only=True)
class GeoAreaBase:
    geometry: GeoJSON = None
    id: ID = None
    source: GeoAreaSource = None


@dataclass(kw_only=True)
class GeoArea(GeoAreaBase):
    geometry: GeoJSON = None
    id: ID = None
    source: GeoAreaSource = None
    description: Optional[String] = None
    typename__: Optional[Literal["GeoArea"]] = "GeoArea"


@dataclass(kw_only=True)
class Address:
    cityCode: String = None
    cityName: String = None
    label: String = None
    postalCode: String = None
    type: AddressType = None
    countryCode: Optional[String] = None
    countryName: Optional[String] = None
    departmentCode: Optional[String] = None
    departmentName: Optional[String] = None
    geometry: Optional[GeoJSON] = None
    regionCode: Optional[String] = None
    regionName: Optional[String] = None
    streetAddress: Optional[String] = None
    streetName: Optional[String] = None
    streetNumber: Optional[String] = None
    typename__: Optional[Literal["Address"]] = "Address"


@dataclass(kw_only=True)
class AddressChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    address: Optional[Address] = None
    commune: Optional[Commune] = None
    departement: Optional[Departement] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["AddressChamp"]] = "AddressChamp"


@dataclass(kw_only=True)
class AddressChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["AddressChampDescriptor"]] = "AddressChampDescriptor"


@dataclass(kw_only=True)
class AnnuaireEducationChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["AnnuaireEducationChampDescriptor"]] = (
        "AnnuaireEducationChampDescriptor"
    )


@dataclass(kw_only=True)
class Association:
    rna: String = None
    titre: String = None
    dateCreation: Optional[ISO8601Date] = None
    dateDeclaration: Optional[ISO8601Date] = None
    datePublication: Optional[ISO8601Date] = None
    objet: Optional[String] = None
    typename__: Optional[Literal["Association"]] = "Association"


@dataclass(kw_only=True)
class Avis:
    attachments: list[File] = None
    dateQuestion: ISO8601DateTime = None
    id: ID = None
    instructeur: Profile = None
    question: String = None
    attachment: Optional[File] = None
    claimant: Optional[Profile] = None
    dateReponse: Optional[ISO8601DateTime] = None
    expert: Optional[Profile] = None
    questionAnswer: Optional[Boolean] = None
    questionLabel: Optional[String] = None
    reponse: Optional[String] = None
    typename__: Optional[Literal["Avis"]] = "Avis"


@dataclass(kw_only=True)
class COJOChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["COJOChampDescriptor"]] = "COJOChampDescriptor"


@dataclass(kw_only=True)
class CarteChamp(ChampBase):
    champDescriptorId: String = None
    geoAreas: list[GeoArea] = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["CarteChamp"]] = "CarteChamp"

    @classmethod
    def from_dict(cls, data: dict) -> CarteChamp:
        """
        Create an instance of CarteChamp from a dictionary.
        """

        TYPE_MAP = {
            "ParcelleCadastrale": ParcelleCadastrale,
            "SelectionUtilisateur": SelectionUtilisateur,
        }
        parsed_geo_areas = []
        for geo_area in data.get("geoAreas", []):
            if geo_area and "__typename" in geo_area:
                type_name = geo_area["__typename"]
                output_type = TYPE_MAP.get(type_name)
                if output_type:
                    parsed_geo_areas.append(
                        from_dict(
                            data_class=output_type, data=geo_area, config=PARSER_CONFIG
                        )
                    )
        data["geoAreas"] = parsed_geo_areas

        return from_dict(data_class=cls, data=data, config=PARSER_CONFIG)


@dataclass(kw_only=True)
class CarteChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["CarteChampDescriptor"]] = "CarteChampDescriptor"


@dataclass(kw_only=True)
class CheckboxChamp(ChampBase):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    value: Boolean = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["CheckboxChamp"]] = "CheckboxChamp"


@dataclass(kw_only=True)
class CheckboxChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["CheckboxChampDescriptor"]] = "CheckboxChampDescriptor"


@dataclass(kw_only=True)
class ChorusConfiguration:
    centreDeCout: Optional[String] = None
    domaineFonctionnel: Optional[String] = None
    referentielDeProgrammation: Optional[String] = None
    typename__: Optional[Literal["ChorusConfiguration"]] = "ChorusConfiguration"


@dataclass(kw_only=True)
class CiviliteChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    value: Optional[Civilite] = None
    typename__: Optional[Literal["CiviliteChamp"]] = "CiviliteChamp"


@dataclass(kw_only=True)
class CiviliteChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["CiviliteChampDescriptor"]] = "CiviliteChampDescriptor"


@dataclass(kw_only=True)
class CnafChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["CnafChampDescriptor"]] = "CnafChampDescriptor"


@dataclass(kw_only=True)
class Commune:
    code: String = None
    name: String = None
    postalCode: Optional[String] = None
    typename__: Optional[Literal["Commune"]] = "Commune"


@dataclass(kw_only=True)
class CommuneChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    commune: Optional[Commune] = None
    departement: Optional[Departement] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["CommuneChamp"]] = "CommuneChamp"


@dataclass(kw_only=True)
class CommuneChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["CommuneChampDescriptor"]] = "CommuneChampDescriptor"


@dataclass(kw_only=True)
class Correction:
    reason: CorrectionReason = None
    dateResolution: Optional[ISO8601DateTime] = None
    typename__: Optional[Literal["Correction"]] = "Correction"


@dataclass(kw_only=True)
class CreateDirectUploadPayload:
    """
    Autogenerated return type of CreateDirectUpload.
    """

    directUpload: DirectUpload = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["CreateDirectUploadPayload"]] = (
        "CreateDirectUploadPayload"
    )


@dataclass(kw_only=True)
class DateChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    date: Optional[ISO8601Date] = None
    stringValue: Optional[String] = None
    value: Optional[ISO8601DateTime] = None
    typename__: Optional[Literal["DateChamp"]] = "DateChamp"


@dataclass(kw_only=True)
class DateChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["DateChampDescriptor"]] = "DateChampDescriptor"


@dataclass(kw_only=True)
class DatetimeChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    datetime: Optional[ISO8601DateTime] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["DatetimeChamp"]] = "DatetimeChamp"


@dataclass(kw_only=True)
class DatetimeChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["DatetimeChampDescriptor"]] = "DatetimeChampDescriptor"


@dataclass(kw_only=True)
class DecimalNumberChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    value: Optional[Float] = None
    typename__: Optional[Literal["DecimalNumberChamp"]] = "DecimalNumberChamp"


@dataclass(kw_only=True)
class DecimalNumberChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["DecimalNumberChampDescriptor"]] = (
        "DecimalNumberChampDescriptor"
    )


@dataclass(kw_only=True)
class DeletedDossier:
    """
    Un dossier supprimé
    """

    dateSupression: ISO8601DateTime = None
    id: ID = None
    number: Int = None
    reason: String = None
    state: DossierState = None
    typename__: Optional[Literal["DeletedDossier"]] = "DeletedDossier"


@dataclass(kw_only=True)
class DeletedDossierConnection:
    """
    The connection type for DeletedDossier.
    """

    pageInfo: PageInfo = None
    edges: Optional[list[Optional[DeletedDossierEdge]]] = None
    nodes: Optional[list[Optional[DeletedDossier]]] = None
    typename__: Optional[Literal["DeletedDossierConnection"]] = (
        "DeletedDossierConnection"
    )


@dataclass(kw_only=True)
class DeletedDossierEdge:
    """
    An edge in a connection.
    """

    cursor: String = None
    node: Optional[DeletedDossier] = None
    typename__: Optional[Literal["DeletedDossierEdge"]] = "DeletedDossierEdge"


class DossierIterator:
    def __init__(
        self,
        demarche_id: str,
        fetch_page_func,
        first_page: list[dict] = list,
        has_more: bool = True,
        cursor: Optional[str] = None,
    ):
        """Un itérateur pour parcourir les dossiers d'une démarche.

        As the first page may have been fetched with the demarche metadata, we can pass it and its cursor as args
        """
        self.demarche_id = demarche_id
        self.fetch_page = fetch_page_func
        self.buffer = first_page
        self.has_more = has_more
        self.cursor = cursor

    def __iter__(self):
        return self

    def __next__(self):
        if not self.buffer and self.has_more:
            page_data = self.fetch_page(self.cursor)

            self.buffer = page_data["dossiers"]
            self.cursor = page_data["endCursor"]
            self.has_more = page_data["hasNextPage"]

            if not self.buffer:
                raise StopIteration

        if not self.buffer:
            raise StopIteration

        return self.buffer.pop(0)


@dataclass(kw_only=True)
class Demarche:
    """
    Une démarche
    """

    activeRevision: Revision = None
    administrateurs: list[Profile] = None
    annotationDescriptors: list[ChampDescriptor] = None
    champDescriptors: list[ChampDescriptor] = None
    dateCreation: ISO8601DateTime = None
    dateDerniereModification: ISO8601DateTime = None
    deletedDossiers: DeletedDossierConnection = None
    description: String = None
    dossiers: DossierConnection = None
    draftRevision: Revision = None
    groupeInstructeurs: list[GroupeInstructeur] = None
    id: ID = None
    labels: list[Label] = None
    number: Int = None
    pendingDeletedDossiers: DeletedDossierConnection = None
    revisions: list[Revision] = None
    state: DemarcheState = None
    title: String = None
    chorusConfiguration: Optional[ChorusConfiguration] = None
    dateDepublication: Optional[ISO8601DateTime] = None
    dateFermeture: Optional[ISO8601DateTime] = None
    datePublication: Optional[ISO8601DateTime] = None
    declarative: Optional[DossierDeclarativeState] = None
    publishedRevision: Optional[Revision] = None
    service: Optional[Service] = None
    typename__: Optional[Literal["Demarche"]] = "Demarche"

    @classmethod
    def from_dict(cls, dict) -> Demarche:
        return from_dict(data_class=cls, data=dict, config=PARSER_CONFIG)


@dataclass(kw_only=True)
class DemarcheWithRawDossiers(Demarche):
    """
    Une démarche avec un iterateur retournant les dossiers bruts sous forme de dictionnaires.
    """

    dossiers: DossierConnection | DossierIterator = None

    def set_dossier_iterator(
        self,
        fetch_page_func,
        first_page: list[dict] = list,
        has_more: bool = True,
        cursor: Optional[str] = None,
    ):
        self.dossiers = DossierIterator(
            self.id, fetch_page_func, first_page, has_more, cursor
        )


@dataclass(kw_only=True)
class DemarcheClonerPayload:
    """
    Autogenerated return type of DemarcheCloner.
    """

    clientMutationId: Optional[String] = None
    demarche: Optional[DemarcheDescriptor] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DemarcheClonerPayload"]] = "DemarcheClonerPayload"


@dataclass(kw_only=True)
class DemarcheDescriptor:
    """
    Une démarche (métadonnées)
    Ceci est une version abrégée du type `Demarche`, qui n’expose que les métadonnées.
    Cela évite l’accès récursif aux dossiers.
    """

    dateCreation: ISO8601DateTime = None
    dateDerniereModification: ISO8601DateTime = None
    description: String = None
    dureeConservationDossiers: Int = None
    id: ID = None
    number: Int = None
    opendata: Boolean = None
    revision: Revision = None
    state: DemarcheState = None
    tags: list[String] = None
    title: String = None
    zones: list[String] = None
    cadreJuridiqueURL: Optional[String] = None
    cadreJuridiqueUrl: Optional[String] = None
    dateDepublication: Optional[ISO8601DateTime] = None
    dateFermeture: Optional[ISO8601DateTime] = None
    datePublication: Optional[ISO8601DateTime] = None
    declarative: Optional[DossierDeclarativeState] = None
    deliberation: Optional[File] = None
    demarcheURL: Optional[URL] = None
    demarcheUrl: Optional[URL] = None
    dpoURL: Optional[String] = None
    dpoUrl: Optional[String] = None
    logo: Optional[File] = None
    notice: Optional[File] = None
    noticeURL: Optional[URL] = None
    noticeUrl: Optional[URL] = None
    service: Optional[Service] = None
    siteWebURL: Optional[String] = None
    siteWebUrl: Optional[String] = None
    typename__: Optional[Literal["DemarcheDescriptor"]] = "DemarcheDescriptor"


@dataclass(kw_only=True)
class Departement:
    code: String = None
    name: String = None
    typename__: Optional[Literal["Departement"]] = "Departement"


@dataclass(kw_only=True)
class DepartementChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    departement: Optional[Departement] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["DepartementChamp"]] = "DepartementChamp"


@dataclass(kw_only=True)
class DepartementChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    options: Optional[list[Departement]] = None
    typename__: Optional[Literal["DepartementChampDescriptor"]] = (
        "DepartementChampDescriptor"
    )


@dataclass(kw_only=True)
class DgfipChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["DgfipChampDescriptor"]] = "DgfipChampDescriptor"


@dataclass(kw_only=True)
class DirectUpload:
    """
    Represents direct upload credentials
    """

    blobId: ID = None
    headers: String = None
    signedBlobId: ID = None
    url: String = None
    typename__: Optional[Literal["DirectUpload"]] = "DirectUpload"


@dataclass(kw_only=True)
class Dossier:
    """
    Un dossier
    """

    annotations: list[Champ] = None
    archived: Boolean = None
    avis: list[Avis] = None
    champs: list[
        Champ
        | AddressChamp
        | CarteChamp
        | CheckboxChamp
        | CiviliteChamp
        | CommuneChamp
        | DateChamp
        | DatetimeChamp
        | DecimalNumberChamp
        | DepartementChamp
        | DossierLinkChamp
        | EngagementJuridiqueChamp
        | EpciChamp
        | IntegerNumberChamp
        | LinkedDropDownListChamp
        | MultipleDropDownListChamp
        | PaysChamp
        | PieceJustificativeChamp
        | RNAChamp
        | RNFChamp
        | RegionChamp
        | RepetitionChamp
        | SiretChamp
        | TextChamp
        | TitreIdentiteChamp
        | YesNoChamp
    ] = None
    connectionUsager: ConnectionUsager = None
    dateDepot: ISO8601DateTime = None
    dateDerniereModification: ISO8601DateTime = None
    dateDerniereModificationAnnotations: ISO8601DateTime = None
    dateDerniereModificationChamps: ISO8601DateTime = None
    datePassageEnConstruction: ISO8601DateTime = None
    demandeur: (
        Demandeur | PersonnePhysique | PersonneMorale | PersonneMoraleIncomplete
    ) = None
    demarche: DemarcheDescriptor = None
    groupeInstructeur: GroupeInstructeur = None
    id: ID = None
    instructeurs: list[Profile] = None
    labels: list[Label] = None
    messages: list[Message] = None
    number: Int = None
    prefilled: Boolean = None
    revision: Revision = None
    state: DossierState = None
    traitements: list[Traitement] = None
    usager: Profile = None
    attestation: Optional[File] = None
    dateDerniereCorrectionEnAttente: Optional[ISO8601DateTime] = None
    dateExpiration: Optional[ISO8601DateTime] = None
    datePassageEnInstruction: Optional[ISO8601DateTime] = None
    datePrevisionnelleDecisionSVASVR: Optional[ISO8601Date] = None
    dateSuppressionParAdministration: Optional[ISO8601DateTime] = None
    dateSuppressionParUsager: Optional[ISO8601DateTime] = None
    dateTraitement: Optional[ISO8601DateTime] = None
    dateTraitementSVASVR: Optional[ISO8601DateTime] = None
    deposeParUnTiers: Optional[Boolean] = None
    geojson: Optional[File] = None
    motivation: Optional[String] = None
    motivationAttachment: Optional[File] = None
    nomMandataire: Optional[String] = None
    pdf: Optional[File] = None
    prenomMandataire: Optional[String] = None
    typename__: Optional[Literal["Dossier"]] = "Dossier"

    @classmethod
    def from_dict(cls, data: dict) -> Dossier:
        clone = copy.deepcopy(data)
        type_map = {
            "PersonnePhysique": PersonnePhysique,
            "PersonneMorale": PersonneMorale,
            "PersonneMoraleIncomplete": PersonneMoraleIncomplete,
            "AddressChamp": AddressChamp,
            "CarteChamp": CarteChamp,
            "CheckboxChamp": CheckboxChamp,
            "CiviliteChamp": CiviliteChamp,
            "CommuneChamp": CommuneChamp,
            "DateChamp": DateChamp,
            "DatetimeChamp": DatetimeChamp,
            "DecimalNumberChamp": DecimalNumberChamp,
            "DepartementChamp": DepartementChamp,
            "DossierLinkChamp": DossierLinkChamp,
            "EngagementJuridiqueChamp": EngagementJuridiqueChamp,
            "EpciChamp": EpciChamp,
            "IntegerNumberChamp": IntegerNumberChamp,
            "LinkedDropDownListChamp": LinkedDropDownListChamp,
            "MultipleDropDownListChamp": MultipleDropDownListChamp,
            "PaysChamp": PaysChamp,
            "PieceJustificativeChamp": PieceJustificativeChamp,
            "RNAChamp": RNAChamp,
            "RNFChamp": RNFChamp,
            "RegionChamp": RegionChamp,
            "RepetitionChamp": RepetitionChamp,
            "SiretChamp": SiretChamp,
            "TextChamp": TextChamp,
            "TitreIdentiteChamp": TitreIdentiteChamp,
            "YesNoChamp": YesNoChamp,
        }

        demandeur_data = clone.get("demandeur")
        if demandeur_data and "__typename" in demandeur_data:
            type_name = demandeur_data["__typename"]
            output_type = type_map.get(type_name)
            if output_type:
                clone["demandeur"] = from_dict(
                    data_class=output_type, data=demandeur_data, config=PARSER_CONFIG
                )
        parsed_champs = []
        for champ in clone.get("champs") or []:
            if champ and "__typename" in champ:
                type_name = champ["__typename"]
                output_type = type_map.get(type_name)
                if output_type:
                    if output_type == CarteChamp:
                        parsed_champs.append(CarteChamp.from_dict(champ))
                    else:
                        parsed_champs.append(
                            from_dict(
                                data_class=output_type, data=champ, config=PARSER_CONFIG
                            )
                        )
        clone["champs"] = parsed_champs

        if "demarche" in clone and "revision" in clone["demarche"]:
            clone["demarche"]["revision"] = Revision.from_dict(
                clone["demarche"]["revision"]
            )

        return from_dict(data_class=Dossier, data=clone, config=PARSER_CONFIG)

    @property
    def applicant_name(self) -> str:
        """
        Returns the name of the applicant based on the type of demandeur.
        """
        if isinstance(self.demandeur, PersonnePhysique):
            applicant_name = f"{self.demandeur.civilite.value} {self.demandeur.prenom} {self.demandeur.nom}"
        elif isinstance(self.demandeur, PersonneMorale):
            applicant_name = (
                self.demandeur.entreprise.nomCommercial
                if self.demandeur.entreprise
                else None
            )
        elif isinstance(self.demandeur, PersonneMoraleIncomplete):
            applicant_name = self.demandeur.siret
        else:
            applicant_name = None

        return (
            None
            if applicant_name is None or applicant_name.strip() == ""
            else applicant_name.strip()
        )


@dataclass(kw_only=True)
class DossierAccepterPayload:
    """
    Autogenerated return type of DossierAccepter.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierAccepterPayload"]] = "DossierAccepterPayload"


@dataclass(kw_only=True)
class DossierAjouterLabelPayload:
    """
    Autogenerated return type of DossierAjouterLabel.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    label: Optional[Label] = None
    typename__: Optional[Literal["DossierAjouterLabelPayload"]] = (
        "DossierAjouterLabelPayload"
    )


@dataclass(kw_only=True)
class DossierArchiverPayload:
    """
    Autogenerated return type of DossierArchiver.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierArchiverPayload"]] = "DossierArchiverPayload"


@dataclass(kw_only=True)
class DossierChangerGroupeInstructeurPayload:
    """
    Autogenerated return type of DossierChangerGroupeInstructeur.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierChangerGroupeInstructeurPayload"]] = (
        "DossierChangerGroupeInstructeurPayload"
    )


@dataclass(kw_only=True)
class DossierClasserSansSuitePayload:
    """
    Autogenerated return type of DossierClasserSansSuite.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierClasserSansSuitePayload"]] = (
        "DossierClasserSansSuitePayload"
    )


@dataclass(kw_only=True)
class DossierConnection:
    """
    The connection type for Dossier.
    """

    pageInfo: PageInfo = None
    edges: Optional[list[Optional[DossierEdge]]] = None
    nodes: Optional[list[Optional[Dossier]]] = None
    typename__: Optional[Literal["DossierConnection"]] = "DossierConnection"


@dataclass(kw_only=True)
class DossierDesarchiverPayload:
    """
    Autogenerated return type of DossierDesarchiver.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierDesarchiverPayload"]] = (
        "DossierDesarchiverPayload"
    )


@dataclass(kw_only=True)
class DossierEdge:
    """
    An edge in a connection.
    """

    cursor: String = None
    node: Optional[Dossier] = None
    typename__: Optional[Literal["DossierEdge"]] = "DossierEdge"


@dataclass(kw_only=True)
class DossierEnvoyerMessagePayload:
    """
    Autogenerated return type of DossierEnvoyerMessage.
    """

    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    message: Optional[Message] = None
    typename__: Optional[Literal["DossierEnvoyerMessagePayload"]] = (
        "DossierEnvoyerMessagePayload"
    )


@dataclass(kw_only=True)
class DossierLinkChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    dossier: Optional[Dossier] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["DossierLinkChamp"]] = "DossierLinkChamp"


@dataclass(kw_only=True)
class DossierLinkChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["DossierLinkChampDescriptor"]] = (
        "DossierLinkChampDescriptor"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationAjouterLignePayload:
    """
    Autogenerated return type of DossierModifierAnnotationAjouterLigne.
    """

    annotation: Optional[RepetitionChamp] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationAjouterLignePayload"]] = (
        "DossierModifierAnnotationAjouterLignePayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationCheckboxPayload:
    """
    Autogenerated return type of DossierModifierAnnotationCheckbox.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationCheckboxPayload"]] = (
        "DossierModifierAnnotationCheckboxPayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDatePayload:
    """
    Autogenerated return type of DossierModifierAnnotationDate.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationDatePayload"]] = (
        "DossierModifierAnnotationDatePayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDatetimePayload:
    """
    Autogenerated return type of DossierModifierAnnotationDatetime.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationDatetimePayload"]] = (
        "DossierModifierAnnotationDatetimePayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDecimalNumberPayload:
    """
    Autogenerated return type of DossierModifierAnnotationDecimalNumber.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationDecimalNumberPayload"]] = (
        "DossierModifierAnnotationDecimalNumberPayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDropDownListPayload:
    """
    Autogenerated return type of DossierModifierAnnotationDropDownList.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationDropDownListPayload"]] = (
        "DossierModifierAnnotationDropDownListPayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationIntegerNumberPayload:
    """
    Autogenerated return type of DossierModifierAnnotationIntegerNumber.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationIntegerNumberPayload"]] = (
        "DossierModifierAnnotationIntegerNumberPayload"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationTextPayload:
    """
    Autogenerated return type of DossierModifierAnnotationText.
    """

    annotation: Optional[Champ] = None
    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierModifierAnnotationTextPayload"]] = (
        "DossierModifierAnnotationTextPayload"
    )


@dataclass(kw_only=True)
class DossierPasserEnInstructionPayload:
    """
    Autogenerated return type of DossierPasserEnInstruction.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierPasserEnInstructionPayload"]] = (
        "DossierPasserEnInstructionPayload"
    )


@dataclass(kw_only=True)
class DossierRefuserPayload:
    """
    Autogenerated return type of DossierRefuser.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierRefuserPayload"]] = "DossierRefuserPayload"


@dataclass(kw_only=True)
class DossierRepasserEnConstructionPayload:
    """
    Autogenerated return type of DossierRepasserEnConstruction.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierRepasserEnConstructionPayload"]] = (
        "DossierRepasserEnConstructionPayload"
    )


@dataclass(kw_only=True)
class DossierRepasserEnInstructionPayload:
    """
    Autogenerated return type of DossierRepasserEnInstruction.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    typename__: Optional[Literal["DossierRepasserEnInstructionPayload"]] = (
        "DossierRepasserEnInstructionPayload"
    )


@dataclass(kw_only=True)
class DossierSupprimerLabelPayload:
    """
    Autogenerated return type of DossierSupprimerLabel.
    """

    clientMutationId: Optional[String] = None
    dossier: Optional[Dossier] = None
    errors: Optional[list[ValidationError]] = None
    label: Optional[Label] = None
    typename__: Optional[Literal["DossierSupprimerLabelPayload"]] = (
        "DossierSupprimerLabelPayload"
    )


@dataclass(kw_only=True)
class DossierSupprimerMessagePayload:
    """
    Autogenerated return type of DossierSupprimerMessage.
    """

    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    message: Optional[Message] = None
    typename__: Optional[Literal["DossierSupprimerMessagePayload"]] = (
        "DossierSupprimerMessagePayload"
    )


@dataclass(kw_only=True)
class DropDownListChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    options: Optional[list[String]] = None
    otherOption: Optional[Boolean] = None
    typename__: Optional[Literal["DropDownListChampDescriptor"]] = (
        "DropDownListChampDescriptor"
    )


@dataclass(kw_only=True)
class Effectif:
    nb: Float = None
    periode: String = None
    typename__: Optional[Literal["Effectif"]] = "Effectif"


@dataclass(kw_only=True)
class EmailChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["EmailChampDescriptor"]] = "EmailChampDescriptor"


@dataclass(kw_only=True)
class EngagementJuridique:
    montantEngage: Optional[String] = None
    montantPaye: Optional[String] = None
    typename__: Optional[Literal["EngagementJuridique"]] = "EngagementJuridique"


@dataclass(kw_only=True)
class EngagementJuridiqueChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    engagementJuridique: Optional[EngagementJuridique] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["EngagementJuridiqueChamp"]] = (
        "EngagementJuridiqueChamp"
    )


@dataclass(kw_only=True)
class EngagementJuridiqueChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["EngagementJuridiqueChampDescriptor"]] = (
        "EngagementJuridiqueChampDescriptor"
    )


@dataclass(kw_only=True)
class Entreprise:
    inlineAdresse: String = None
    nomCommercial: String = None
    raisonSociale: String = None
    siren: String = None
    siretSiegeSocial: String = None
    attestationFiscaleAttachment: Optional[File] = None
    attestationSocialeAttachment: Optional[File] = None
    capitalSocial: Optional[BigInt] = None
    codeEffectifEntreprise: Optional[String] = None
    dateCreation: Optional[ISO8601Date] = None
    effectifAnnuel: Optional[Effectif] = None
    effectifMensuel: Optional[Effectif] = None
    enseigne: Optional[String] = None
    etatAdministratif: Optional[EntrepriseEtatAdministratif] = None
    formeJuridique: Optional[String] = None
    formeJuridiqueCode: Optional[String] = None
    nom: Optional[String] = None
    numeroTvaIntracommunautaire: Optional[String] = None
    prenom: Optional[String] = None
    typename__: Optional[Literal["Entreprise"]] = "Entreprise"


@dataclass(kw_only=True)
class Epci:
    code: String = None
    name: String = None
    typename__: Optional[Literal["Epci"]] = "Epci"


@dataclass(kw_only=True)
class EpciChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    departement: Optional[Departement] = None
    epci: Optional[Epci] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["EpciChamp"]] = "EpciChamp"


@dataclass(kw_only=True)
class EpciChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["EpciChampDescriptor"]] = "EpciChampDescriptor"


@dataclass(kw_only=True)
class ExplicationChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    collapsibleExplanationEnabled: Optional[Boolean] = None
    collapsibleExplanationText: Optional[String] = None
    description: Optional[String] = None
    typename__: Optional[Literal["ExplicationChampDescriptor"]] = (
        "ExplicationChampDescriptor"
    )


@dataclass(kw_only=True)
class File:
    byteSize: Int = None
    byteSizeBigInt: BigInt = None
    checksum: String = None
    contentType: String = None
    createdAt: ISO8601DateTime = None
    filename: String = None
    url: URL = None
    typename__: Optional[Literal["File"]] = "File"


@dataclass(kw_only=True)
class FormattedChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["FormattedChampDescriptor"]] = (
        "FormattedChampDescriptor"
    )


@dataclass(kw_only=True)
class GeoJSON:
    coordinates: Coordinates = None
    type: String = None
    typename__: Optional[Literal["GeoJSON"]] = "GeoJSON"


@dataclass(kw_only=True)
class GroupeInstructeur:
    """
    Un groupe instructeur
    """

    closed: Boolean = None
    id: ID = None
    instructeurs: list[Profile] = None
    label: String = None
    number: Int = None
    typename__: Optional[Literal["GroupeInstructeur"]] = "GroupeInstructeur"


@dataclass(kw_only=True)
class GroupeInstructeurAjouterInstructeursPayload:
    """
    Autogenerated return type of GroupeInstructeurAjouterInstructeurs.
    """

    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    groupeInstructeur: Optional[GroupeInstructeur] = None
    warnings: Optional[list[WarningMessage]] = None
    typename__: Optional[Literal["GroupeInstructeurAjouterInstructeursPayload"]] = (
        "GroupeInstructeurAjouterInstructeursPayload"
    )


@dataclass(kw_only=True)
class GroupeInstructeurCreerPayload:
    """
    Autogenerated return type of GroupeInstructeurCreer.
    """

    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    groupeInstructeur: Optional[GroupeInstructeur] = None
    warnings: Optional[list[WarningMessage]] = None
    typename__: Optional[Literal["GroupeInstructeurCreerPayload"]] = (
        "GroupeInstructeurCreerPayload"
    )


@dataclass(kw_only=True)
class GroupeInstructeurModifierPayload:
    """
    Autogenerated return type of GroupeInstructeurModifier.
    """

    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    groupeInstructeur: Optional[GroupeInstructeur] = None
    typename__: Optional[Literal["GroupeInstructeurModifierPayload"]] = (
        "GroupeInstructeurModifierPayload"
    )


@dataclass(kw_only=True)
class GroupeInstructeurSupprimerInstructeursPayload:
    """
    Autogenerated return type of GroupeInstructeurSupprimerInstructeurs.
    """

    clientMutationId: Optional[String] = None
    errors: Optional[list[ValidationError]] = None
    groupeInstructeur: Optional[GroupeInstructeur] = None
    typename__: Optional[Literal["GroupeInstructeurSupprimerInstructeursPayload"]] = (
        "GroupeInstructeurSupprimerInstructeursPayload"
    )


@dataclass(kw_only=True)
class GroupeInstructeurWithDossiers:
    """
    Un groupe instructeur avec ses dossiers
    """

    closed: Boolean = None
    deletedDossiers: DeletedDossierConnection = None
    dossiers: DossierConnection = None
    id: ID = None
    instructeurs: list[Profile] = None
    label: String = None
    number: Int = None
    pendingDeletedDossiers: DeletedDossierConnection = None
    typename__: Optional[Literal["GroupeInstructeurWithDossiers"]] = (
        "GroupeInstructeurWithDossiers"
    )


@dataclass(kw_only=True)
class HeaderSectionChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["HeaderSectionChampDescriptor"]] = (
        "HeaderSectionChampDescriptor"
    )


@dataclass(kw_only=True)
class IbanChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["IbanChampDescriptor"]] = "IbanChampDescriptor"


@dataclass(kw_only=True)
class IntegerNumberChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    value: Optional[BigInt] = None
    typename__: Optional[Literal["IntegerNumberChamp"]] = "IntegerNumberChamp"


@dataclass(kw_only=True)
class IntegerNumberChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["IntegerNumberChampDescriptor"]] = (
        "IntegerNumberChampDescriptor"
    )


@dataclass(kw_only=True)
class Label:
    color: LabelColorEnum = None
    id: ID = None
    name: String = None
    typename__: Optional[Literal["Label"]] = "Label"


@dataclass(kw_only=True)
class LinkedDropDownListChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    primaryValue: Optional[String] = None
    secondaryValue: Optional[String] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["LinkedDropDownListChamp"]] = "LinkedDropDownListChamp"


@dataclass(kw_only=True)
class LinkedDropDownListChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    options: Optional[list[String]] = None
    typename__: Optional[Literal["LinkedDropDownListChampDescriptor"]] = (
        "LinkedDropDownListChampDescriptor"
    )


@dataclass(kw_only=True)
class MesriChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["MesriChampDescriptor"]] = "MesriChampDescriptor"


@dataclass(kw_only=True)
class Message:
    attachments: list[File] = None
    body: String = None
    createdAt: ISO8601DateTime = None
    email: String = None
    id: ID = None
    attachment: Optional[File] = None
    correction: Optional[Correction] = None
    discardedAt: Optional[ISO8601DateTime] = None
    typename__: Optional[Literal["Message"]] = "Message"


@dataclass(kw_only=True)
class MultipleDropDownListChamp(ChampBase):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    values: list[String] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["MultipleDropDownListChamp"]] = (
        "MultipleDropDownListChamp"
    )


@dataclass(kw_only=True)
class MultipleDropDownListChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    options: Optional[list[String]] = None
    typename__: Optional[Literal["MultipleDropDownListChampDescriptor"]] = (
        "MultipleDropDownListChampDescriptor"
    )


@dataclass(kw_only=True)
class NumberChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["NumberChampDescriptor"]] = "NumberChampDescriptor"


@dataclass(kw_only=True)
class PageInfo:
    """
    Information about pagination in a connection.
    """

    hasNextPage: Boolean = None
    hasPreviousPage: Boolean = None
    endCursor: Optional[String] = None
    startCursor: Optional[String] = None
    typename__: Optional[Literal["PageInfo"]] = "PageInfo"


@dataclass(kw_only=True)
class ParcelleCadastrale(GeoAreaBase):
    codeArr: String = None
    codeCom: String = None
    codeDep: String = None
    commune: String = None
    feuille: Int = None
    geometry: GeoJSON = None
    id: ID = None
    nomCom: String = None
    numero: String = None
    prefixe: String = None
    section: String = None
    source: GeoAreaSource = None
    surface: String = None
    surfaceIntersection: Float = None
    surfaceParcelle: Float = None
    description: Optional[String] = None
    typename__: Optional[Literal["ParcelleCadastrale"]] = "ParcelleCadastrale"


@dataclass(kw_only=True)
class Pays:
    code: String = None
    name: String = None
    typename__: Optional[Literal["Pays"]] = "Pays"


@dataclass(kw_only=True)
class PaysChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    pays: Optional[Pays] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["PaysChamp"]] = "PaysChamp"


@dataclass(kw_only=True)
class PaysChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    options: Optional[list[Pays]] = None
    typename__: Optional[Literal["PaysChampDescriptor"]] = "PaysChampDescriptor"


@dataclass(kw_only=True)
class PersonneMorale(DemandeurBase):
    address: Address = None
    adresse: String = None
    codeInseeLocalite: String = None
    codePostal: String = None
    id: ID = None
    libelleNaf: String = None
    localite: String = None
    siegeSocial: Boolean = None
    siret: String = None
    association: Optional[Association] = None
    complementAdresse: Optional[String] = None
    entreprise: Optional[Entreprise] = None
    naf: Optional[String] = None
    nomVoie: Optional[String] = None
    numeroVoie: Optional[String] = None
    typeVoie: Optional[String] = None
    typename__: Optional[Literal["PersonneMorale"]] = "PersonneMorale"


@dataclass(kw_only=True)
class PersonneMoraleIncomplete(DemandeurBase):
    id: ID = None
    siret: String = None
    typename__: Optional[Literal["PersonneMoraleIncomplete"]] = (
        "PersonneMoraleIncomplete"
    )


@dataclass(kw_only=True)
class PersonnePhysique(DemandeurBase):
    id: ID = None
    nom: String = None
    prenom: String = None
    civilite: Optional[Civilite] = None
    dateDeNaissance: Optional[ISO8601Date] = None
    email: Optional[String] = None
    typename__: Optional[Literal["PersonnePhysique"]] = "PersonnePhysique"


@dataclass(kw_only=True)
class PhoneChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["PhoneChampDescriptor"]] = "PhoneChampDescriptor"


@dataclass(kw_only=True)
class PieceJustificativeChamp(ChampBase):
    champDescriptorId: String = None
    files: list[File] = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    file: Optional[File] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["PieceJustificativeChamp"]] = "PieceJustificativeChamp"


@dataclass(kw_only=True)
class PieceJustificativeChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    fileTemplate: Optional[File] = None
    typename__: Optional[Literal["PieceJustificativeChampDescriptor"]] = (
        "PieceJustificativeChampDescriptor"
    )


@dataclass(kw_only=True)
class PoleEmploiChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["PoleEmploiChampDescriptor"]] = (
        "PoleEmploiChampDescriptor"
    )


@dataclass(kw_only=True)
class Profile:
    """
    Profil d'un usager connecté (déposant un dossier, instruisant un dossier...)
    """

    email: String = None
    id: ID = None
    typename__: Optional[Literal["Profile"]] = "Profile"


@dataclass(kw_only=True)
class RNA:
    id: String = None
    address: Optional[Address] = None
    title: Optional[String] = None
    typename__: Optional[Literal["RNA"]] = "RNA"


@dataclass(kw_only=True)
class RNAChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    commune: Optional[Commune] = None
    departement: Optional[Departement] = None
    rna: Optional[RNA] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["RNAChamp"]] = "RNAChamp"


@dataclass(kw_only=True)
class RNAChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["RNAChampDescriptor"]] = "RNAChampDescriptor"


@dataclass(kw_only=True)
class RNF:
    id: String = None
    address: Optional[Address] = None
    title: Optional[String] = None
    typename__: Optional[Literal["RNF"]] = "RNF"


@dataclass(kw_only=True)
class RNFChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    commune: Optional[Commune] = None
    departement: Optional[Departement] = None
    rnf: Optional[RNF] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["RNFChamp"]] = "RNFChamp"


@dataclass(kw_only=True)
class RNFChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["RNFChampDescriptor"]] = "RNFChampDescriptor"


@dataclass(kw_only=True)
class ReferentielChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["ReferentielChampDescriptor"]] = (
        "ReferentielChampDescriptor"
    )


@dataclass(kw_only=True)
class Region:
    code: String = None
    name: String = None
    typename__: Optional[Literal["Region"]] = "Region"


@dataclass(kw_only=True)
class RegionChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    region: Optional[Region] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["RegionChamp"]] = "RegionChamp"


@dataclass(kw_only=True)
class RegionChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    options: Optional[list[Region]] = None
    typename__: Optional[Literal["RegionChampDescriptor"]] = "RegionChampDescriptor"


@dataclass(kw_only=True)
class RepetitionChamp(ChampBase):
    champDescriptorId: String = None
    champs: list[Champ] = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    rows: list[Row] = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["RepetitionChamp"]] = "RepetitionChamp"


@dataclass(kw_only=True)
class RepetitionChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["RepetitionChampDescriptor"]] = (
        "RepetitionChampDescriptor"
    )


@dataclass(kw_only=True)
class Revision:
    annotationDescriptors: list[ChampDescriptor] = None
    champDescriptors: list[ChampDescriptor] = None
    dateCreation: ISO8601DateTime = None
    id: ID = None
    datePublication: Optional[ISO8601DateTime] = None
    typename__: Optional[Literal["Revision"]] = "Revision"

    @classmethod
    def from_dict(cls, dict) -> Revision:

        TYPE_MAP = {
            "AddressChampDescriptor": AddressChampDescriptor,
            "AnnuaireEducationChampDescriptor": AnnuaireEducationChampDescriptor,
            "COJOChampDescriptor": COJOChampDescriptor,
            "CarteChampDescriptor": CarteChampDescriptor,
            "CheckboxChampDescriptor": CheckboxChampDescriptor,
            "CiviliteChampDescriptor": CiviliteChampDescriptor,
            "CnafChampDescriptor": CnafChampDescriptor,
            "CommuneChampDescriptor": CommuneChampDescriptor,
            "DateChampDescriptor": DateChampDescriptor,
            "DatetimeChampDescriptor": DatetimeChampDescriptor,
            "DecimalNumberChampDescriptor": DecimalNumberChampDescriptor,
            "DepartementChampDescriptor": DepartementChampDescriptor,
            "DgfipChampDescriptor": DgfipChampDescriptor,
            "DossierLinkChampDescriptor": DossierLinkChampDescriptor,
            "DropDownListChampDescriptor": DropDownListChampDescriptor,
            "EmailChampDescriptor": EmailChampDescriptor,
            "EngagementJuridiqueChampDescriptor": EngagementJuridiqueChampDescriptor,
            "EpciChampDescriptor": EpciChampDescriptor,
            "ExplicationChampDescriptor": ExplicationChampDescriptor,
            "FormattedChampDescriptor": FormattedChampDescriptor,
            "HeaderSectionChampDescriptor": HeaderSectionChampDescriptor,
            "IbanChampDescriptor": IbanChampDescriptor,
            "IntegerNumberChampDescriptor": IntegerNumberChampDescriptor,
            "LinkedDropDownListChampDescriptor": LinkedDropDownListChampDescriptor,
            "MesriChampDescriptor": MesriChampDescriptor,
            "MultipleDropDownListChampDescriptor": MultipleDropDownListChampDescriptor,
            "NumberChampDescriptor": NumberChampDescriptor,
            "PaysChampDescriptor": PaysChampDescriptor,
            "PhoneChampDescriptor": PhoneChampDescriptor,
            "PieceJustificativeChampDescriptor": PieceJustificativeChampDescriptor,
            "PoleEmploiChampDescriptor": PoleEmploiChampDescriptor,
            "RNAChampDescriptor": RNAChampDescriptor,
            "RNFChampDescriptor": RNFChampDescriptor,
            "ReferentielChampDescriptor": ReferentielChampDescriptor,
            "RegionChampDescriptor": RegionChampDescriptor,
            "RepetitionChampDescriptor": RepetitionChampDescriptor,
            "SiretChampDescriptor": SiretChampDescriptor,
            "TextChampDescriptor": TextChampDescriptor,
            "TextareaChampDescriptor": TextareaChampDescriptor,
            "TitreIdentiteChampDescriptor": TitreIdentiteChampDescriptor,
            "YesNoChampDescriptor": YesNoChampDescriptor,
        }
        parsed_descriptors = []
        for descriptor in dict.get("champDescriptors", []):
            if descriptor and "__typename" in descriptor:
                type_name = descriptor["__typename"]
                output_type = TYPE_MAP.get(type_name)
                if output_type:
                    parsed_descriptors.append(
                        from_dict(
                            data_class=output_type,
                            data=descriptor,
                            config=PARSER_CONFIG,
                        )
                    )
        dict["champDescriptors"] = parsed_descriptors

        return from_dict(data_class=cls, data=dict, config=PARSER_CONFIG)


@dataclass(kw_only=True)
class Row:
    champs: list[Champ] = None
    id: ID = None
    typename__: Optional[Literal["Row"]] = "Row"


@dataclass(kw_only=True)
class SelectionUtilisateur(GeoArea):
    geometry: GeoJSON = None
    id: ID = None
    source: GeoAreaSource = None
    description: Optional[String] = None
    typename__: Optional[Literal["SelectionUtilisateur"]] = "SelectionUtilisateur"


@dataclass(kw_only=True)
class Service:
    id: ID = None
    nom: String = None
    organisme: String = None
    typeOrganisme: TypeOrganisme = None
    siret: Optional[String] = None
    typename__: Optional[Literal["Service"]] = "Service"


@dataclass(kw_only=True)
class SiretChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    etablissement: Optional[PersonneMorale] = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["SiretChamp"]] = "SiretChamp"


@dataclass(kw_only=True)
class SiretChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["SiretChampDescriptor"]] = "SiretChampDescriptor"


@dataclass(kw_only=True)
class TextChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["TextChamp"]] = "TextChamp"


@dataclass(kw_only=True)
class TextChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["TextChampDescriptor"]] = "TextChampDescriptor"


@dataclass(kw_only=True)
class TextareaChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["TextareaChampDescriptor"]] = "TextareaChampDescriptor"


@dataclass(kw_only=True)
class TitreIdentiteChamp(ChampBase):
    champDescriptorId: String = None
    filled: Boolean = None
    grantType: TitreIdentiteGrantType = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    typename__: Optional[Literal["TitreIdentiteChamp"]] = "TitreIdentiteChamp"


@dataclass(kw_only=True)
class TitreIdentiteChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["TitreIdentiteChampDescriptor"]] = (
        "TitreIdentiteChampDescriptor"
    )


@dataclass(kw_only=True)
class Traitement:
    dateTraitement: ISO8601DateTime = None
    event: TraitementEvent = None
    id: ID = None
    state: DossierState = None
    emailAgentTraitant: Optional[String] = None
    motivation: Optional[String] = None
    revision: Optional[Revision] = None
    typename__: Optional[Literal["Traitement"]] = "Traitement"


@dataclass(kw_only=True)
class ValidationError:
    """
    Éreur de validation
    """

    message: String = None
    typename__: Optional[Literal["ValidationError"]] = "ValidationError"


@dataclass(kw_only=True)
class WarningMessage:
    """
    Message d’alerte
    """

    message: String = None
    typename__: Optional[Literal["WarningMessage"]] = "WarningMessage"


@dataclass(kw_only=True)
class YesNoChamp(Champ):
    champDescriptorId: String = None
    id: ID = None
    label: String = None
    prefilled: Boolean = None
    updatedAt: ISO8601DateTime = None
    stringValue: Optional[String] = None
    value: Optional[Boolean] = None
    typename__: Optional[Literal["YesNoChamp"]] = "YesNoChamp"


@dataclass(kw_only=True)
class YesNoChampDescriptor(ChampDescriptor):
    id: ID = None
    label: String = None
    required: Boolean = None
    type: TypeDeChamp = None
    champDescriptors: Optional[list[ChampDescriptor]] = None
    description: Optional[String] = None
    typename__: Optional[Literal["YesNoChampDescriptor"]] = "YesNoChampDescriptor"


@dataclass(kw_only=True)
class CreateDirectUploadInput:
    """
    Autogenerated input type of CreateDirectUpload
    """

    byteSize: Int = None
    checksum: String = None
    contentType: String = None
    dossierId: ID = None
    filename: String = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["CreateDirectUploadInput"]] = "CreateDirectUploadInput"


@dataclass(kw_only=True)
class DemarcheClonerInput:
    """
    Autogenerated input type of DemarcheCloner
    """

    demarche: FindDemarcheInput = None
    clientMutationId: Optional[String] = None
    title: Optional[String] = None
    typename__: Optional[Literal["DemarcheClonerInput"]] = "DemarcheClonerInput"


@dataclass(kw_only=True)
class DossierAccepterInput:
    """
    Autogenerated input type of DossierAccepter
    """

    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    disableNotification: Optional[Boolean] = False
    justificatif: Optional[ID] = None
    motivation: Optional[String] = None
    typename__: Optional[Literal["DossierAccepterInput"]] = "DossierAccepterInput"


@dataclass(kw_only=True)
class DossierAjouterLabelInput:
    """
    Autogenerated input type of DossierAjouterLabel
    """

    dossierId: ID = None
    labelId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierAjouterLabelInput"]] = (
        "DossierAjouterLabelInput"
    )


@dataclass(kw_only=True)
class DossierArchiverInput:
    """
    Autogenerated input type of DossierArchiver
    """

    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierArchiverInput"]] = "DossierArchiverInput"


@dataclass(kw_only=True)
class DossierChangerGroupeInstructeurInput:
    """
    Autogenerated input type of DossierChangerGroupeInstructeur = None
    """

    dossierId: ID = None
    groupeInstructeurId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierChangerGroupeInstructeurInput"]] = (
        "DossierChangerGroupeInstructeurInput"
    )


@dataclass(kw_only=True)
class DossierClasserSansSuiteInput:
    """
    Autogenerated input type of DossierClasserSansSuite
    """

    dossierId: ID = None
    instructeurId: ID = None
    motivation: String = None
    clientMutationId: Optional[String] = None
    disableNotification: Optional[Boolean] = False
    justificatif: Optional[ID] = None
    typename__: Optional[Literal["DossierClasserSansSuiteInput"]] = (
        "DossierClasserSansSuiteInput"
    )


@dataclass(kw_only=True)
class DossierDesarchiverInput:
    """
    Autogenerated input type of DossierDesarchiver
    """

    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierDesarchiverInput"]] = "DossierDesarchiverInput"


@dataclass(kw_only=True)
class DossierEnvoyerMessageInput:
    """
    Autogenerated input type of DossierEnvoyerMessage
    """

    body: String = None
    dossierId: ID = None
    instructeurId: ID = None
    attachment: Optional[ID] = None
    clientMutationId: Optional[String] = None
    correction: Optional[CorrectionReason] = None
    typename__: Optional[Literal["DossierEnvoyerMessageInput"]] = (
        "DossierEnvoyerMessageInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationAjouterLigneInput:
    """
    Autogenerated input type of DossierModifierAnnotationAjouterLigne
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationAjouterLigneInput"]] = (
        "DossierModifierAnnotationAjouterLigneInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationCheckboxInput:
    """
    Autogenerated input type of DossierModifierAnnotationCheckbox
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: Boolean = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationCheckboxInput"]] = (
        "DossierModifierAnnotationCheckboxInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDateInput:
    """
    Autogenerated input type of DossierModifierAnnotationDate
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: ISO8601Date = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationDateInput"]] = (
        "DossierModifierAnnotationDateInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDatetimeInput:
    """
    Autogenerated input type of DossierModifierAnnotationDatetime
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: ISO8601DateTime = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationDatetimeInput"]] = (
        "DossierModifierAnnotationDatetimeInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDecimalNumberInput:
    """
    Autogenerated input type of DossierModifierAnnotationDecimalNumber
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: Float = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationDecimalNumberInput"]] = (
        "DossierModifierAnnotationDecimalNumberInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationDropDownListInput:
    """
    Autogenerated input type of DossierModifierAnnotationDropDownList
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: String = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationDropDownListInput"]] = (
        "DossierModifierAnnotationDropDownListInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationIntegerNumberInput:
    """
    Autogenerated input type of DossierModifierAnnotationIntegerNumber
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: Int = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationIntegerNumberInput"]] = (
        "DossierModifierAnnotationIntegerNumberInput"
    )


@dataclass(kw_only=True)
class DossierModifierAnnotationTextInput:
    """
    Autogenerated input type of DossierModifierAnnotationText
    """

    annotationId: ID = None
    dossierId: ID = None
    instructeurId: ID = None
    value: String = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierModifierAnnotationTextInput"]] = (
        "DossierModifierAnnotationTextInput"
    )


@dataclass(kw_only=True)
class DossierPasserEnInstructionInput:
    """
    Autogenerated input type of DossierPasserEnInstruction
    """

    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    disableNotification: Optional[Boolean] = False
    typename__: Optional[Literal["DossierPasserEnInstructionInput"]] = (
        "DossierPasserEnInstructionInput"
    )


@dataclass(kw_only=True)
class DossierRefuserInput:
    """
    Autogenerated input type of DossierRefuser
    """

    dossierId: ID = None
    instructeurId: ID = None
    motivation: String = None
    clientMutationId: Optional[String] = None
    disableNotification: Optional[Boolean] = False
    justificatif: Optional[ID] = None
    typename__: Optional[Literal["DossierRefuserInput"]] = "DossierRefuserInput"


@dataclass(kw_only=True)
class DossierRepasserEnConstructionInput:
    """
    Autogenerated input type of DossierRepasserEnConstruction
    """

    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    disableNotification: Optional[Boolean] = False
    typename__: Optional[Literal["DossierRepasserEnConstructionInput"]] = (
        "DossierRepasserEnConstructionInput"
    )


@dataclass(kw_only=True)
class DossierRepasserEnInstructionInput:
    """
    Autogenerated input type of DossierRepasserEnInstruction
    """

    dossierId: ID = None
    instructeurId: ID = None
    clientMutationId: Optional[String] = None
    disableNotification: Optional[Boolean] = False
    typename__: Optional[Literal["DossierRepasserEnInstructionInput"]] = (
        "DossierRepasserEnInstructionInput"
    )


@dataclass(kw_only=True)
class DossierSupprimerLabelInput:
    """
    Autogenerated input type of DossierSupprimerLabel
    """

    dossierId: ID = None
    labelId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierSupprimerLabelInput"]] = (
        "DossierSupprimerLabelInput"
    )


@dataclass(kw_only=True)
class DossierSupprimerMessageInput:
    """
    Autogenerated input type of DossierSupprimerMessage
    """

    instructeurId: ID = None
    messageId: ID = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["DossierSupprimerMessageInput"]] = (
        "DossierSupprimerMessageInput"
    )


@dataclass(kw_only=True)
class FindDemarcheInput:
    id: Optional[ID] = None
    number: Optional[Int] = None
    typename__: Optional[Literal["FindDemarcheInput"]] = "FindDemarcheInput"


@dataclass(kw_only=True)
class GroupeInstructeurAjouterInstructeursInput:
    """
    Autogenerated input type of GroupeInstructeurAjouterInstructeurs
    """

    groupeInstructeurId: ID = None
    instructeurs: list[ProfileInput] = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["GroupeInstructeurAjouterInstructeursInput"]] = (
        "GroupeInstructeurAjouterInstructeursInput"
    )


@dataclass(kw_only=True)
class GroupeInstructeurAttributes:
    """
    Attributs pour l’ajout d'un groupe instructeur.
    """

    label: String = None
    closed: Optional[Boolean] = False
    instructeurs: Optional[list[ProfileInput]] = field(default_factory=lambda: [])
    typename__: Optional[Literal["GroupeInstructeurAttributes"]] = (
        "GroupeInstructeurAttributes"
    )


@dataclass(kw_only=True)
class GroupeInstructeurCreerInput:
    """
    Autogenerated input type of GroupeInstructeurCreer
    """

    demarche: FindDemarcheInput = None
    groupeInstructeur: GroupeInstructeurAttributes = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["GroupeInstructeurCreerInput"]] = (
        "GroupeInstructeurCreerInput"
    )


@dataclass(kw_only=True)
class GroupeInstructeurModifierInput:
    """
    Autogenerated input type of GroupeInstructeurModifier
    """

    groupeInstructeurId: ID = None
    clientMutationId: Optional[String] = None
    closed: Optional[Boolean] = None
    label: Optional[String] = None
    typename__: Optional[Literal["GroupeInstructeurModifierInput"]] = (
        "GroupeInstructeurModifierInput"
    )


@dataclass(kw_only=True)
class GroupeInstructeurSupprimerInstructeursInput:
    """
    Autogenerated input type of GroupeInstructeurSupprimerInstructeurs
    """

    groupeInstructeurId: ID = None
    instructeurs: list[ProfileInput] = None
    clientMutationId: Optional[String] = None
    typename__: Optional[Literal["GroupeInstructeurSupprimerInstructeursInput"]] = (
        "GroupeInstructeurSupprimerInstructeursInput"
    )


@dataclass(kw_only=True)
class ProfileInput:
    email: Optional[String] = None
    id: Optional[ID] = None
    typename__: Optional[Literal["ProfileInput"]] = "ProfileInput"
