# Generated by Django 4.2 on 2023-04-17 13:53

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import envergo.evaluations.models
import phonenumber_field.modelfields
import re
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("geodata", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Request",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        db_index=True,
                        default=envergo.evaluations.models.generate_reference,
                        max_length=64,
                        null=True,
                        unique=True,
                        verbose_name="Reference",
                    ),
                ),
                ("address", models.TextField(verbose_name="Address")),
                (
                    "moulinette_url",
                    models.URLField(
                        blank=True, max_length=1024, verbose_name="Moulinette url"
                    ),
                ),
                (
                    "application_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=re.RegexFlag["IGNORECASE"],
                                message="The application number format is invalid.",
                                regex="^(PC|PA|DP|CU)(?P<department>\\d{3})(?P<commune>\\d{3})(?P<year>\\d{2})(?P<file>[\\w\\d]{5})$",
                            )
                        ],
                        verbose_name="Application number",
                    ),
                ),
                (
                    "created_surface",
                    models.IntegerField(
                        blank=True,
                        help_text="In square meters",
                        null=True,
                        verbose_name="Created surface",
                    ),
                ),
                (
                    "existing_surface",
                    models.IntegerField(
                        blank=True,
                        help_text="In square meters",
                        null=True,
                        verbose_name="Existing surface",
                    ),
                ),
                (
                    "project_description",
                    models.TextField(
                        blank=True, verbose_name="Project description, comments"
                    ),
                ),
                (
                    "additional_data",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=envergo.evaluations.models.additional_data_file_format,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf", "zip"]
                            )
                        ],
                        verbose_name="Additional data",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("instructor", "Un service instruction urbanisme"),
                            ("petitioner", "Un porteur de projet ou maître d'œuvre"),
                        ],
                        default="instructor",
                        max_length=32,
                        verbose_name="Who are you?",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="E-mail"
                    ),
                ),
                (
                    "project_sponsor_emails",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Project sponsor email(s)",
                    ),
                ),
                (
                    "project_sponsor_phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=20,
                        region=None,
                        verbose_name="Project sponsor phone number",
                    ),
                ),
                (
                    "other_contacts",
                    models.TextField(blank=True, verbose_name="Other contacts"),
                ),
                (
                    "send_eval_to_sponsor",
                    models.BooleanField(
                        default=True, verbose_name="Send evaluation to project sponsor"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Date created"
                    ),
                ),
                (
                    "parcels",
                    models.ManyToManyField(to="geodata.parcel", verbose_name="Parcels"),
                ),
            ],
            options={
                "verbose_name": "Evaluation request",
                "verbose_name_plural": "Evaluation requests",
            },
        ),
        migrations.CreateModel(
            name="RequestFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        storage=envergo.evaluations.models.get_upload_storage,
                        upload_to=envergo.evaluations.models.request_file_format,
                        verbose_name="File",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=1024, verbose_name="Name"),
                ),
                (
                    "request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="additional_files",
                        to="evaluations.request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Request file",
                "verbose_name_plural": "Request files",
            },
        ),
        migrations.CreateModel(
            name="Evaluation",
            fields=[
                (
                    "uid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        db_index=True,
                        default=envergo.evaluations.models.generate_reference,
                        max_length=64,
                        unique=True,
                        verbose_name="Reference",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(max_length=254, verbose_name="E-mail"),
                ),
                (
                    "application_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=re.RegexFlag["IGNORECASE"],
                                message="The application number format is invalid.",
                                regex="^(PC|PA|DP|CU)(?P<department>\\d{3})(?P<commune>\\d{3})(?P<year>\\d{2})(?P<file>[\\w\\d]{5})$",
                            )
                        ],
                        verbose_name="Application number",
                    ),
                ),
                (
                    "evaluation_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=envergo.evaluations.models.evaluation_file_format,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf"]
                            )
                        ],
                        verbose_name="Evaluation file",
                    ),
                ),
                ("address", models.TextField(verbose_name="Address")),
                (
                    "created_surface",
                    models.IntegerField(
                        help_text="In square meters", verbose_name="Created surface"
                    ),
                ),
                (
                    "existing_surface",
                    models.IntegerField(
                        blank=True,
                        help_text="In square meters",
                        null=True,
                        verbose_name="Existing surface",
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("soumis", "Soumis"),
                            ("non_soumis", "Non soumis"),
                            ("action_requise", "Action requise"),
                        ],
                        max_length=32,
                        null=True,
                        verbose_name="Result",
                    ),
                ),
                ("details_md", models.TextField(blank=True, verbose_name="Details")),
                ("details_html", models.TextField(blank=True, verbose_name="Details")),
                ("contact_md", models.TextField(blank=True, verbose_name="Contact")),
                (
                    "contact_html",
                    models.TextField(blank=True, verbose_name="Contact (html)"),
                ),
                (
                    "moulinette_url",
                    models.URLField(
                        blank=True, max_length=1024, verbose_name="Moulinette url"
                    ),
                ),
                (
                    "moulinette_data",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Moulinette metadata"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Date created"
                    ),
                ),
                (
                    "request",
                    models.OneToOneField(
                        blank=True,
                        help_text="Does this evaluation answers to an existing request?",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="evaluations.request",
                        verbose_name="Request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Evaluation",
                "verbose_name_plural": "Evaluations",
            },
        ),
        migrations.CreateModel(
            name="Criterion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="Order")),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("soumis", "Seuil franchi"),
                            ("non_soumis", "Seuil non franchi"),
                            ("action_requise", "Action requise"),
                            ("non_applicable", "Non concerné"),
                        ],
                        max_length=32,
                        verbose_name="Result",
                    ),
                ),
                (
                    "required_action",
                    models.TextField(
                        blank=True,
                        choices=[
                            (
                                "surface_lt_1000",
                                "n'impacte pas plus de 1000\xa0m² de zone humide",
                            ),
                            (
                                "surface_lt_400",
                                "n'impacte pas plus de 400\xa0m² de zone inondable",
                            ),
                            (
                                "runoff_lt_10000",
                                "a une surface totale, augmentée de l'aire d'écoulement d'eaux de pluie interceptée, inférieure à 1\xa0ha",
                            ),
                        ],
                        verbose_name="Required action",
                    ),
                ),
                (
                    "probability",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Unlikely"),
                            (2, "Possible"),
                            (3, "Likely"),
                            (4, "Very likely"),
                        ],
                        null=True,
                        verbose_name="Probability",
                    ),
                ),
                (
                    "criterion",
                    models.CharField(
                        choices=[
                            (
                                "rainwater_runoff",
                                "<strong>Impact sur l'écoulement des eaux pluviales</strong><br /> Seuil de déclaration\xa0: 1\xa0ha",
                            ),
                            (
                                "flood_zone",
                                "<strong>Impact sur une zone inondable</strong><br /> Seuil de déclaration\xa0: 400\xa0m²",
                            ),
                            (
                                "wetland",
                                "<strong>Impact sur une zone humide</strong><br /> Seuil de déclaration\xa0: 1\xa0000\xa0m²",
                            ),
                        ],
                        max_length=128,
                        verbose_name="Criterion",
                    ),
                ),
                ("description_md", models.TextField(verbose_name="Description")),
                (
                    "description_html",
                    models.TextField(verbose_name="Description (html)"),
                ),
                (
                    "map",
                    models.ImageField(
                        blank=True, null=True, upload_to="", verbose_name="Map"
                    ),
                ),
                ("legend_md", models.TextField(blank=True, verbose_name="Legend")),
                (
                    "legend_html",
                    models.TextField(blank=True, verbose_name="Legend (html)"),
                ),
                (
                    "evaluation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="criterions",
                        to="evaluations.evaluation",
                        verbose_name="Evaluation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Criterion",
                "verbose_name_plural": "Criterions",
                "unique_together": {("evaluation", "criterion")},
            },
        ),
    ]
